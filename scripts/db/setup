#!/bin/bash

# Prerequisites: postgresql installed
# terminal pwd is andrewslai/scripts/db

# The way the scripts are setup, you need the
# default 'postgres' user and their password

# The script will check for an existing db,
# If exists, prompt user for overwrite
# If not, create.

# Also creates a new table, fruits
# and a user with permissions on the table.

##########################################
# Setup
##########################################
export KALEIDOSCOPE_DB_NAME="andrewslai_db"
export KALEIDOSCOPE_DB_USER="andrewslai"
export KALEIDOSCOPE_DB_PASSWORD="andrewslai"
# POSTGRES_USER_PASSWORD exported  FROM .bashrc
export PGPASSWORD=$POSTGRES_USER_PASSWORD


##########################################
# Functions
##########################################
overwrite_db_prompt () {
  echo "****************";
  echo "Do you want to overwrite the existing DB? (Y, N)";
  read input_variable;
  case $input_variable in
      Y ) echo "Continuing";;
      * ) echo "Aborting"; exit;;
  esac
}

setup_user () {
  if ($does_user_exist); then
      overwrite_user_prompt
      create_new_db_user
      grant_db_permissions $KALEIDOSCOPE_DB_USER $KALEIDOSCOPE_DB_NAME
  fi
}

overwrite_user_prompt () {
  echo "****************";
  echo "Do you want to overwrite the existing user: $KALEIDOSCOPE_DB_USER? (Y, N)"
  read input_variable;
  case $input_variable in
      Y ) echo "Yes - Continuing";;
      * ) echo "Aborting"; exit;;
  esac
}

populate_default_database () {
  echo "****************";
  echo "Populating default database";
  for f in ./defaults/*
  do
      #cat $f
      PGPASSWORD=$KALEIDOSCOPE_DB_PASSWORD psql -U $KALEIDOSCOPE_DB_USER -d $KALEIDOSCOPE_DB_NAME -f $f >> db_init_log.txt
      echo "Added $f to database"
  done
  # psql -U postgres -d $KALEIDOSCOPE_DB_NAME -f "./defaults/fruit.sql"
  # psql -U postgres -d $KALEIDOSCOPE_DB_NAME -f "./defaults/articles.sql"
}

create_new_db_user () {
  echo "Creating user... "
  echo "username: $KALEIDOSCOPE_DB_USER"
  echo "password: $KALEIDOSCOPE_DB_PASSWORD";

  psql -U postgres -d $KALEIDOSCOPE_DB_NAME -c \
       "DROP USER IF EXISTS $KALEIDOSCOPE_DB_USER;
       CREATE USER $KALEIDOSCOPE_DB_USER
              WITH ENCRYPTED PASSWORD '$KALEIDOSCOPE_DB_PASSWORD';"
}

grant_db_permissions () {
  USER=${1:?"You must enter a username"}
  DB=${2:?"You must enter a database"}

  echo "Granting permissions... "

   psql -U postgres -d $DB -c \
       "GRANT ALL ON DATABASE $DB TO $USER;
       GRANT USAGE, CREATE ON SCHEMA public TO $USER;"
}

does_user_exist () {
  if  psql -U postgres -d $KALEIDOSCOPE_DB_NAME -c "\du" |
          cut -d \| -f 1 | grep -qw $KALEIDOSCOPE_DB_USER; then
      echo "****************";
      echo "User exists"
      echo 1
  else
      echo "****************";
      echo "User does not exist"
      echo 0
  fi
}

##########################################
# Helper fcns 
##########################################
delete_database () {
   psql -U postgres -c "DROP DATABASE $KALEIDOSCOPE_DB_NAME;"
}

create_database () {
   psql -U postgres -c "CREATE DATABASE $KALEIDOSCOPE_DB_NAME;"
}

##########################################
# Main executable commands
##########################################
echo "****************"
echo "Checking if DB exists:: $KALEIDOSCOPE_DB_NAME"
if  psql -U postgres -lqt | cut -d \| -f 1 | grep -qw $KALEIDOSCOPE_DB_NAME; then
  echo "Database found!"
  overwrite_db_prompt
  delete_database
  create_database
  setup_user
  populate_default_database
else
  echo "Database does not exist\n\n"
  create_database
  setup_user
  populate_default_database
fi
echo "****************"
echo "DONE"
